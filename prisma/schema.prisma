// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id              String           @id
  version         String
  courseRevisions CourseRevision[]
  courseBin       CourseBin[]
}

model CourseRevision {
  courseId            String
  revision            Int
  internalNote        String
  course              Course                       @relation(fields: [courseId], references: [id])
  itemsRevision       Int
  metaRevision        Int
  parts               CoursePartRelation[]
  courseMasterRecords CourseMasterRecordRelation[]

  @@id([courseId, revision])
  @@unique([courseId, revision, metaRevision])
  @@unique([courseId, revision, itemsRevision])
}

model Part {
  id            String         @id
  partRevisions PartRevision[]
}

model PartRevision {
  partId        String
  revision      Int
  title         String
  part          Part                  @relation(fields: [partId], references: [id])
  itemsRevision Int
  courses       CoursePartRelation[]
  sections      PartSectionRelation[]

  @@id([partId, revision])
  @@unique([partId, revision, itemsRevision])
}

model Section {
  id               String            @id
  sectionRevisions SectionRevision[]
}

model SectionRevision {
  sectionId     String
  revision      Int
  title         String
  section       Section                     @relation(fields: [sectionId], references: [id])
  itemsRevision Int
  parts         PartSectionRelation[]
  subsections   SectionSubsectionRelation[]

  @@id([sectionId, revision])
  @@unique([sectionId, revision, itemsRevision])
}

model Subsection {
  id                  String               @id
  subsectionRevisions SubsectionRevision[]
}

model SubsectionRevision {
  subsectionId  String
  revision      Int
  title         String
  subsection    Subsection                      @relation(fields: [subsectionId], references: [id])
  itemsRevision Int
  sections      SectionSubsectionRelation[]
  courseAssets  SubsectionCourseAssetRelation[]
  //if update self -> revision ++ but itemsRevision is the same then it shoud use revision + itemsRevision as unique

  @@id([subsectionId, revision])
  @@unique([subsectionId, revision, itemsRevision])
}

model CourseAsset {
  id                  String                @id
  assetId             String
  assetRevision       Int
  assetType           String
  CourseAssetRevision CourseAssetRevision[]
}

model CourseAssetRevision {
  courseAssetId                 String
  timestamp                     String
  displayName                   String
  other                         String
  revision                      Int
  courseAsset                   CourseAsset                     @relation(fields: [courseAssetId], references: [id])
  SubsectionCourseAssetRelation SubsectionCourseAssetRelation[]

  @@id([courseAssetId, revision])
}

model CourseBin {
  id       String @id
  assets   Json[]
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model CourseMasterRecord {
  masterRecordId       String
  masterRecordRevision Int
  revision             Int
  values               Json[]
  courses              CourseMasterRecordRelation[]

  @@id([masterRecordId, revision])
}

model CourseMasterRecordRelation {
  masterRecordId       String
  courseId             String
  masterRecordRevision Int
  metaRevision         Int
  masterRecord         CourseMasterRecord @relation(fields: [masterRecordId, masterRecordRevision], references: [masterRecordId, revision])
  course               CourseRevision     @relation(fields: [courseId, metaRevision, revision], references: [courseId, metaRevision, revision])
  revision             Int

  @@id([masterRecordId, courseId, metaRevision])
}

model CoursePartRelation {
  courseId            String
  partId              String
  course              CourseRevision @relation(fields: [courseId, courseItemsRevision, courseRevision], references: [courseId, itemsRevision, revision])
  part                PartRevision   @relation(fields: [partId, partRevision], references: [partId, revision])
  courseItemsRevision Int
  partRevision        Int
  courseRevision      Int

  @@id([courseId, partId, courseItemsRevision])
}

model PartSectionRelation {
  partId            String
  sectionId         String
  part              PartRevision    @relation(fields: [partId, partItemsRevision, partRevision], references: [partId, itemsRevision, revision])
  section           SectionRevision @relation(fields: [sectionId, sectionRevision], references: [sectionId, revision])
  partItemsRevision Int
  sectionRevision   Int
  partRevision      Int

  @@id([partId, sectionId, partItemsRevision])
}

model SectionSubsectionRelation {
  sectionId    String
  subsectionId String
  section      SectionRevision    @relation(fields: [sectionId, sectionItemsRevision, sectionRevision], references: [sectionId, itemsRevision, revision])
  subsection   SubsectionRevision @relation(fields: [subsectionId, subsectionRevision], references: [subsectionId, revision])

  sectionItemsRevision Int
  subsectionRevision   Int
  sectionRevision      Int

  @@id([sectionId, subsectionId, sectionItemsRevision])
}

model SubsectionCourseAssetRelation {
  subsectionId  String
  courseAssetId String
  subsection    SubsectionRevision  @relation(fields: [subsectionId, subsectionItemsRevision, subsectionRevision], references: [subsectionId, itemsRevision, revision])
  asset         CourseAssetRevision @relation(fields: [courseAssetId, courseAssetRevision], references: [courseAssetId, revision])

  subsectionItemsRevision Int
  courseAssetRevision     Int
  subsectionRevision      Int

  @@id([subsectionId, courseAssetId, subsectionItemsRevision])
}
